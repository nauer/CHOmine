apply plugin: 'idea'

sourceSets {
    main {
        resources {
            srcDirs = ['resources']
        }
    }
}

configurations {
    compile
}

dependencies {
    compile group: "org.intermine", name: "intermine-objectstore", version: imVersion
    compile group: "org.intermine", name: "intermine-api", version: imVersion
    compile group: "org.intermine", name: "intermine-webtasks", version: imVersion
    compile group: 'antlr', name: 'antlr', version: '2.7.6'
}

ext {
    // suffix for property file. might be blank
    mineRelease = hasProperty('release') ? "." + release : ''
    // filename for property file
    minePropertyFileName = "testmodel.properties$mineRelease"
    // full path to file
    minePropertyFile = "${System.env.HOME}/.intermine/$minePropertyFileName"
    localMinePropertyFile = true
    // NO PROPERTY FILE -- use the default
    if( !file(minePropertyFile).exists() ) {
        localMinePropertyFile = false
        minePropertyFile = "$project.rootDir/dbmodel/resources/testmodel.properties"
    }

    println "Using InterMine properties file $minePropertyFile"
}

task copyMineProperties(type: Copy) {
    description "Copies mine specific intermine.properties file (from .intermine directory) into resources output to be included in the war"
    from minePropertyFile
    into sourceSets.main.output.resourcesDir
    rename { fileName -> fileName.replace("testmodel.properties$mineRelease", "intermine.properties") }
    inputs.sourceFiles.stopExecutionIfEmpty()
}

processResources {
  if( !localMinePropertyFile ) {
    def db_username = System.getenv('USER')
    def db_pw = System.getenv('USER')

    eachFile { copyDetails ->
        if (copyDetails.path == 'testmodel.properties') {
            filter { line ->
                line.replace('PSQL_USER', "$db_username")
            }
        }
        if (copyDetails.path == 'testmodel.properties') {
            filter { line ->
                line.replace('PSQL_PWD', "$db_pw")
            }
        }
        rename { fileName -> fileName.replace("testmodel.properties", "intermine.properties") }
    }
  } else {
      tasks.copyMineProperties.execute()
  }
}

void buildDatabase(osname, model) {
    ant.taskdef(name: 'torque', classname: 'org.intermine.objectstore.intermine.TorqueModelOutputTask') {
        classpath {
            pathelement(path: configurations.compile.asPath)
            dirset(dir: "$buildDir") // intermine.properties
        }
    }
    ant.torque(osname: "os.$osname", destFile:"$buildDir/os.$osname-schema.xml")
    ant.taskdef(name: 'buildDB', classname: 'org.intermine.task.BuildDbTask') {
        classpath {
            pathelement(path: configurations.compile.asPath)
            dirset(dir: "$buildDir") // intermine.properties, os.unittest-schema.xml
        }
    }
    ant.buildDB(osname: "os.$osname", model: "$model", schemafile:"os.$osname-schema.xml", tempDir: "$buildDir/tmp")
    ant.taskdef(name: 'insertModel', classname: 'org.intermine.task.StoreMetadataTask') {
        classpath {
            pathelement(path: configurations.compile.asPath)
            dirset(dir: "$buildDir") // intermine.properties
        }
    }
    ant.insertModel(osname: "os.$osname", modelName: "$model")

    // <create-indexes alias="${objectstore.name}" />
    // <analyse-db osName="${objectstore.name}"/>
}

void insertDataUnitTest() {
    // TODO this
    // <delete file="${objectstoresummary.properties}"/>
    ant.taskdef(name: 'insertDataUnittest', classname: 'org.intermine.dataloader.XmlDataLoaderTask') {
        classpath {
            pathelement(path: configurations.testCompile.asPath)
            dirset(dir: 'build/resources/main') // intermine.properties
        }
    }   
    ant.insertDataUnittest(integrationWriter: 'integration.unittestmulti', xmlResource: "testmodel_webapp_data.xml", sourceName: "testsource", sourceType: "testsource")
}

void loadsadataLoader() {
    // TODO this
    // <delete file="${objectstoresummary.properties}"/>
    ant.taskdef(name: 'loadsadata', classname: 'org.intermine.dataloader.XmlDataLoaderTask') {
        classpath {
            pathelement(path: configurations.testCompile.asPath)
            dirset(dir: 'build/resources/main') // intermine.properties
        }
    }

    ant.loadsadata(integrationWriter: 'integration.unittestmulti', xmlResource: "testmodel_extra_data.xml", sourceName: "testsource", sourceType: "testsource")
}

void enormocorpLoader() {
    // TODO this
    // <delete file="${objectstoresummary.properties}"/>
    ant.taskdef(name: 'enormocorp', classname: 'org.intermine.dataloader.XmlDataLoaderTask') {
        classpath {
            pathelement(path: configurations.testCompile.asPath)
            dirset(dir: 'build/resources/main') // intermine.properties
        }
    }
    ant.insertDataUnittest(integrationWriter: 'integration.unittestmulti', xmlResource: "testmodel_enormo_data.xml", sourceName: "testsource", sourceType: "testsource")
}

task enormocorp(dependsOn: 'loadsadata') {
    group "${taskGroup}"
    description "Build database and load extra data for intermine-test webapp"
    doLast {
        enormocorpLoader()
    }
}

task loadsadata(dependsOn: 'insertData') {
    group "${taskGroup}"
    description "Build database and load extra data for intermine-test webapp"
    doLast {
        loadsadataLoader()
    }
}

task buildDB() {
    group "${taskGroup}"
    description "Build database for testmodel webapp"
    dependsOn 'build','copyDefaultProperties'
    doFirst {
        // this is only a fatal error if the user did not supply their credentials
        // if they have their own property file, we assume human and not travis
        if (!localMinePropertyFile) {
            exec {
                ignoreExitValue true
                commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database \"intermine-demo\";"
            }
        }
    }
    doLast {
        buildDatabase('unittest', 'testmodel')
    }
}

task insertData(dependsOn: 'buildDB') {
    group "${taskGroup}"
    description "Build database and load data for intermine-test webapp"
    doLast {
        insertDataUnitTest()
    }
}

// this only works correctly after you stop the gradlew process. --stop. otherwise it keeps the connection to dbs
task dropDB {
    description "drop all the testmodel databases. used for debugging only. or not, do what you want I'm not the police."
    doLast {
        exec {
            // just fail silently if DB is already there. Instead we could read in the list of DBs and only
            // create ones that aren't there
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database \"intermine-demo\";"
        }
    }
}

void insertUserTestData() {
    ant.taskdef(name: 'readUserprofileXML', classname: 'org.intermine.web.task.ProfileReadTask') {
        classpath {
            pathelement(path: configurations.compile.asPath)
            dirset(dir: 'build/resources/main') // intermine.properties
        }
    }
    ant.readUserprofileXML(osalias: 'os.unittest', userProfileAlias: 'osw.userprofile-test', filename:"$project.rootDir/webapp/src/main/resources/userprofile-withuser.xml")
}

void loadTemplates() {
    ant.taskdef(name: 'loadDefaultTemplates', classname: 'org.intermine.web.task.LoadDefaultTemplatesTask') {
        classpath {
            pathelement(path: configurations.compile.asPath)
            dirset(dir: 'build/resources/main') // intermine.properties
        }
    }
    ant.loadDefaultTemplates(osAlias: 'os.unittest', userProfileAlias: 'osw.userprofile-test', templatesXml:"$project.rootDir/dbmodel/resources/default-template-queries.xml", username: 'intermine', superuserPassword: 'intermine')
}

task insertUserData() {
    group "${taskGroup}"
    description "Build userprofile database with test users for testmodel webapp"
    dependsOn 'build','copyDefaultProperties'

    doFirst {
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "create database \"userprofile-demo\";"
        }
        buildDatabase('userprofile-test', 'userprofile')
    }
    doLast {
        loadTemplates()
        insertUserTestData()
    }
}

// this only works correctly after you stop the gradlew process. --stop. otherwise it keeps the connection to dbs
task dropUserDB {
    description "drop the userprofile testmodel database. used for debugging only. "
    doLast {
        exec {
            ignoreExitValue true
            commandLine 'psql', '-h', 'localhost', '-d', 'postgres', '-c', "drop database \"userprofile-demo\";"
        }
    }
}
